name: 🔍 jpglens CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  JPGLENS_API_KEY: ${{ secrets.JPGLENS_TEST_API_KEY }}

jobs:
  # Security and dependency audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Code quality and linting
  quality:
    name: 📋 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check src/

      - name: TypeScript type checking
        run: npx tsc --noEmit

  # Unit and integration tests
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: jpglens-coverage

  # Framework compatibility tests
  compatibility:
    name: 🔧 Framework Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [playwright, cypress, selenium, storybook]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ${{ matrix.framework }}
        run: |
          case "${{ matrix.framework }}" in
            playwright)
              npm install --no-save @playwright/test
              npx playwright install chromium
              ;;
            cypress)
              npm install --no-save cypress
              ;;
            selenium)
              npm install --no-save selenium-webdriver
              ;;
            storybook)
              npm install --no-save @storybook/test @storybook/testing-library
              ;;
          esac

      - name: Run compatibility tests
        run: npm run test:compatibility -- --framework=${{ matrix.framework }}

  # Build and package
  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [security, quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Validate package
        run: npm run validate

      - name: Pack package
        run: npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jpglens-package
          path: |
            dist/
            *.tgz

  # End-to-end tests with real frameworks
  e2e:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jpglens-package

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: |
          npm install --no-save @playwright/test
          npx playwright install chromium

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          JPGLENS_TEST_MODE: true

  # Performance benchmarks
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: npm run test:performance

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: benchmarks/

  # Documentation validation
  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate README links
        run: npx markdown-link-check README.md

      - name: Check documentation completeness
        run: npm run docs:validate

      - name: Build documentation
        run: npm run docs:build

  # Publish to npm (only on release)
  publish:
    name: 📦 Publish to NPM
    runs-on: ubuntu-latest
    needs: [security, quality, test, compatibility, build, e2e, performance, docs]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release assets
        run: |
          tar -czf jpglens-${{ github.event.release.tag_name }}.tar.gz dist/
          zip -r jpglens-${{ github.event.release.tag_name }}.zip dist/

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: jpglens-${{ github.event.release.tag_name }}.tar.gz
          asset_name: jpglens-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

  # Notify on completion
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [security, quality, test, compatibility, build, e2e, performance, docs]
    if: always()
    steps:
      - name: Notify Discord
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "jpglens CI/CD Pipeline"
          description: |
            🔍 **jpglens** - Universal AI-Powered UI Testing
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            All quality gates passed! ✅
          color: 0x00ff00

      - name: Update status badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Pipeline completed successfully" > status.txt
